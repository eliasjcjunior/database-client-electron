{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./main/background.js","webpack:///./main/helpers/create-window.js","webpack:///./main/helpers/enable-hot-reload.js","webpack:///./main/helpers/index.js","webpack:///./main/helpers/ipc.js","webpack:///./main/helpers/resolveWithIpc.js","webpack:///external \"electron\"","webpack:///external \"fs\"","webpack:///external \"fs-jetpack\"","webpack:///external \"path\""],"names":[],"mappings":"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","file":"background.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./main/background.js\");\n","import {join} from 'path'\nimport {app, BrowserWindow} from 'electron'\nimport {createWindow, enableHotReload} from './helpers'\n\nconst isProd = process.env.NODE_ENV === 'production'\n\nif (!isProd) {\n  enableHotReload()\n\n  const userDataPath = app.getPath('userData')\n  app.setPath('userData', `${userDataPath} (development)`)\n}\n\napp.on('ready', () => {\n  const mainWindow = new BrowserWindow({\n    width: 1000,\n    height: 800,\n    resizable: false,\n    maximizable: false\n  });\n\n  if (isProd) {\n    const homeFile = join(app.getAppPath(), 'app/home/index.html')\n    mainWindow.loadFile(homeFile)\n  } else {\n    const homeUrl = 'http://localhost:8888/home'\n    mainWindow.loadURL(homeUrl)\n    mainWindow.webContents.openDevTools()\n  }\n})\n\napp.on('window-all-closed', () => {\n  app.quit()\n})\n","import { app, BrowserWindow } from 'electron'\nimport * as jetpack from 'fs-jetpack'\n\nexport default function createWindow(name, options) {\n  const userDataDir = jetpack.cwd(app.getPath('userData'))\n  const stateStoreFile = `window-state-${name}.json`\n  const defaultSize = {\n    width: options.width,\n    height: options.height\n  }\n\n  let state = {}\n  let win\n\n  const restore = () => {\n    let restoredState = {}\n    try {\n      restoredState = userDataDir.read(stateStoreFile, 'json')\n    } catch (err) {\n      // For some reason json can't be read (might be corrupted).\n      // No worries, we have defaults.\n    }\n    return Object.assign({}, defaultSize, restoredState)\n  }\n\n  const getCurrentPosition = () => {\n    const position = win.getPosition()\n    const size = win.getSize()\n    return {\n      x: position[0],\n      y: position[1],\n      width: size[0],\n      height: size[1]\n    }\n  }\n\n  const windowWithinBounds = (windowState, bounds) => {\n    return (\n      windowState.x >= bounds.x &&\n      windowState.y >= bounds.y &&\n      windowState.x + windowState.width <= bounds.x + bounds.width &&\n      windowState.y + windowState.height <= bounds.y + bounds.height\n    )\n  }\n\n  const resetToDefaults = () => {\n    const { screen } = require('electron')\n    const bounds = screen.getPrimaryDisplay().bounds\n    return Object.assign({}, defaultSize, {\n      x: (bounds.width - defaultSize.width) / 2,\n      y: (bounds.height - defaultSize.height) / 2\n    })\n  }\n\n  const ensureVisibleOnSomeDisplay = windowState => {\n    const { screen } = require('electron')\n    const visible = screen.getAllDisplays().some(display => {\n      return windowWithinBounds(windowState, display.bounds)\n    })\n    if (!visible) {\n      // Window is partially or fully not visible now.\n      // Reset it to safe defaults.\n      return resetToDefaults()\n    }\n    return windowState\n  }\n\n  const saveState = () => {\n    if (!win.isMinimized() && !win.isMaximized()) {\n      Object.assign(state, getCurrentPosition())\n    }\n    userDataDir.write(stateStoreFile, state, { atomic: true })\n  }\n\n  state = ensureVisibleOnSomeDisplay(restore())\n\n  win = new BrowserWindow({...options, ...state})\n\n  win.on('close', saveState)\n\n  return win\n}\n","import { watchFile } from 'fs'\nimport { join } from 'path'\nimport { app } from 'electron'\n\nexport default function enableHotReload() {\n  watchFile(join(process.cwd(), 'app/background.js'), () => {\n    app.relaunch()\n    app.exit(0)\n  })\n}\n","import createWindow from './create-window'\nimport enableHotReload from './enable-hot-reload'\nimport ipc from './ipc'\nimport resolveWithIpc from './resolveWithIpc'\n\nexport {\n  createWindow,\n  enableHotReload,\n  ipc,\n  resolveWithIpc\n}\n","import { ipcMain, BrowserWindow } from 'electron'\n\nconst getResponseChannels = channel => ({\n  sendChannel: `%nextron-send-channel-${channel}`,\n  dataChannel: `%nextron-response-data-channel-${channel}`,\n  errorChannel: `%nextron-response-error-channel-${channel}`\n})\n\nconst getRendererResponseChannels = (windowId, channel) => ({\n  sendChannel: `%nextron-send-channel-${windowId}-${channel}`,\n  dataChannel: `%nextron-response-data-channel-${windowId}-${channel}`,\n  errorChannel: `%nextron-response-error-channel-${windowId}-${channel}`\n})\n\nexport default class ipc {\n  static callRenderer(window, channel, data) {\n    return new Promise((resolve, reject) => {\n      const { sendChannel, dataChannel, errorChannel } = getRendererResponseChannels(window.id, channel)\n\n      const cleanup = () => {\n        ipcMain.removeAllListeners(dataChannel)\n        ipcMain.removeAllListeners(errorChannel)\n      }\n\n      ipcMain.on(dataChannel, (event, result) => {\n        cleanup()\n        resolve(result)\n      })\n\n      ipcMain.on(errorChannel, (event, error) => {\n        cleanup()\n        reject(error)\n      })\n\n      if (window.webContents) {\n        window.webContents.send(sendChannel, data)\n      }\n    })\n  }\n\n  static answerRenderer(channel, callback) {\n    const { sendChannel, dataChannel, errorChannel } = getResponseChannels(channel)\n\n    ipcMain.on(sendChannel, async (event, data) => {\n      const window = BrowserWindow.fromWebContents(event.sender)\n\n      const send = (channel, data) => {\n        if (!(window && window.isDestroyed())) {\n          event.sender.send(channel, data)\n        }\n      }\n\n      try {\n        send(dataChannel, await callback(data, window))\n      } catch (error) {\n        send(errorChannel, error)\n      }\n    })\n  }\n\n  static sendToRenderers(channel, data) {\n    for (const window of BrowserWindow.getAllWindows()) {\n      if (window.webContents) {\n        window.webContents.send(channel, data)\n      }\n    }\n  }\n}\n","import { join } from 'path'\nimport { app, ipcMain, BrowserWindow } from 'electron'\n\nexport default function resolveWithIpc() {\n  const isProd = process.env.NODE_ENV === 'production'\n\n  ipcMain.on('resolve', (event, pathname) => {\n    let resolved\n    if (isProd) {\n      const isAssets = /\\.(png|jpe?g|gif|svg|js|css)(\\?.*)?$/.test(pathname)\n      resolved = join(app.getAppPath(), isAssets ? `app/${pathname}` : `app/${pathname}/index.html`)\n    } else {\n      resolved = `http://localhost:8888/${pathname}`\n    }\n    event.returnValue = resolved\n  })\n\n  ipcMain.on('load', (event, resolved) => {\n    const win = BrowserWindow.fromWebContents(event.sender)\n    if (!(win && win.isDestroyed())) {\n      if (isProd) {\n        win.loadFile(resolved)\n      } else {\n        win.loadURL(resolved)\n      }\n    }\n  })\n}\n","module.exports = require(\"electron\");","module.exports = require(\"fs\");","module.exports = require(\"fs-jetpack\");","module.exports = require(\"path\");"],"sourceRoot":""}